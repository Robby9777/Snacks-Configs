//This node is used to display a description window describing the new resource being tracked. It's only shown once per game.
SNACKS_RESOURCE_INTRO
{
	name = ElectricCharge
}
@SNACKS_RESOURCE_INTRO[ElectricCharge]:FOR[SnacksElectricCharge]
{
	title = Electric Charge!
	description = Electric Charge config for Snacks!
}

//When a part with crew capacity is loaded in the editor and it lacks this resource, 
//or when a vessel is loaded into the scene and its parts with crew capacity lack this resource, 
//add it to the part. Doesnâ€™t apply to kerbals going on EVA. Use SNACKS_EVA_RESOURCE for that.
SNACKS_PART_RESOURCE
{
	name = ElectricCharge

	resourceName = ElectricCharge

	// How many units per day that will be consumed. Overrides amount and maxAmount.
	unitsPerDay = 1080

	// Specifies how many days of life support to provide.
	daysLifeSupport = 0.1

	// Overriden by unitsPerDay and daysLifeSupport if they're > 0
	amount = 200
	maxAmount = 200

	//If true (which is the default), then unitsPerDay and daysLifeSupport added are multiplied by the part's crew capacity.
	isPerKerbal = true
}

//When a kerbal goes on EVA, take this resource along and remove a corresponding amount from the vessel.
//NOTE: Snacks is a special case since we have game settings that affect snacks per meal and meals per day.
//So for these values, the SNACKS_EVA_RESOURCE config will reflect the game settings. This config node is provided as an example.
SNACKS_EVA_RESOURCE
{
	resourceName = ElectricCharge
	amount = 200
	maxAmount = 200
	// When the resource amount drops to or below this value, display the warning message.
	warningAmount = 20
	// Message to display when the kerbal's resource has dropped to or below the warningAmount.
	warningMessage = Warning: The supply of Electric Charge has dropped below minimum safetly levels.
}

//This is how you define a resource processor that can consume inputs and produce outputs. The inputs and outputs are applied per kerbal.
//The resources can be part of a vessel or a characteristic of a kerbal, such as Courage, Stupidity, and Stress. If a vessel/kerbal runs out of a consumed resource
//then outcomes defined by the OUTCOME node are applied if told to do so. Similarly, if the vessel/kerbal has no more space to store a produced resource
//then outcomes are applied if told to do so.
SNACKS_RESOURCE_PROCESSOR
{
	name = Electricity
	secondsPerCycle = 3600

	//You can have preconditions that must be met before resources are consumed or produced. The effective crew count will be reduced
	//for each crew member that fails to meed the preconditions. If none of the crew meet the list of preconditions then process cycle is halted.
	PRECONDITION
	{
		name = CheckBreathableAir
		mustExist = false //consume EC if the is below sea level or below the minimum safe atmospheric pressure.
	}

	CONSUMED_RESOURCE
	{
		//Name of the resource
		resourceName = ElectricCharge

		//Amount to consume per kerbal per cycle.
		amount = 180

		//If true, then resource will be displayed in the snapshots window.
		showInSnapshot = true

		//if true then outcomes are applied when vessel/kerbal runs out of the resource.
		failureResultAppliesOutcomes = true
	}

	//Outcomes represent what to do when the vessel/kerbal runs out of a resource and failures apply or the vessel/kerbal runs out of room for the resource and failures apply.
	//When a consumption and/or production process fails, Snacks records the failure. Outcomes like the FaintPenalty below can check to see how many cycles have failed before
	//applying the outcome.
	OUTCOME
	{
		//Name of the outcome. In this case it's the FaintPenalty. For this to be applied, fainting must be enabled in game settings.
		name = FaintPenalty

		//If true, then the outcome will be chosen at random and applied if random penalties are enabled. Otherwise it will always be applied.
		//Default is false.
		canBeRandom = false

		//Message to show to the player. You can omit this for a silent outcome.
		playerMessage = is freezing and faints!

		//The following fields depend upon the name of the outcome.

		//The name of the resource to check for failed process cycles.
		resourceName = ElectricCharge

		//Number of cycles before fainting occurs.
		cyclesBeforeFainting = 2

		//How many seconds to faint for.
		faintDurationSeconds = 600
	}

	OUTCOME
	{
		name = DeathPenalty
		playerMessage = has frozen to death!
		resourceName = ElectricCharge
		cyclesBeforeDeath = 6
	}
}